Cookies and res.json:
====================

Client-Side:
Form Submission: The user fills out a registration form, which contains name, email, and password.

POST Request: This data is sent to the server via an HTTP POST request.

Redirection: If the registration is successful, the client is redirected to the login page.

Server-Side:
Data Reception: The server receives the { name, email, password } data from the client.

Email Check: Checks if the email already exists in the database.

Role Assignment: If this is the first user (isFirstAccount), assigns the role "admin"; otherwise, "user".

User Creation: Creates the user in the database with the provided details and assigned role.

Token Creation: Generates a tokenUser object with user details like name, userId, role, and passes it to attachCookiesToResponse() which in turn sets the JWT token as a cookie and also passes the tokenUser as the value of user .
attachCookiesToResponse({ res, user: tokenUser });
 res.status(StatusCodes.CREATED).json({ user: tokenUser });


Now, about your question:

Is user: tokenUser being sent twice?
Yes, in a way, you are sending user data twice, but in different formats:

As a Cookie: 
The attachCookiesToResponse function sets a JWT (JSON Web Token) cookie. This token contains encoded user information. Here, the token is part of the HTTP response headers, specifically in the Set-Cookie header, which tells the client's browser to store this cookie.

In the Response Body: 
The res.status(StatusCodes.CREATED).json({ user: tokenUser }); line sends the tokenUser object in the response body as JSON. This is separate from the cookie; it's the data that your client-side code can directly read, parse, and use for updating the UI, storing in localStorage, or similar operations.

Clarifications:
Cookie vs. JSON Response: The JWT in the cookie is typically used for authentication in subsequent requests, where the server can verify it without needing to send back user data explicitly each time. 

The JSON response is for immediate use by the client to update state, show success messages, or redirect the user.

Security: Sending user data in both places isn't inherently insecure, but:
The JWT in the cookie should be secured with httpOnly and secure flags in production.

If tokenUser contains sensitive information, ensure the response body is only accessible over HTTPS.

Registration:
Client-Side:
Save User Data to LocalStorage: After receiving the server's response, store the user data in localStorage for UI purposes.

Use Cookie for Authentication: The JWT token will already be stored as a cookie by the server, so no additional action is needed here for authentication.

Redirect to Home Page: Redirect to the home page instead of the login page upon successful registration.


Purpose of credentials: "include" in Registration and login client-side, given that it is included in customFetch():
Future-Proofing: Even though there are no cookies at the time of the initial registration request, including credentials: "include" ensures that if the user or some part of the application was already authenticated (perhaps from a session that wasn't properly closed), any existing cookies would be included in the request. This could be relevant if your application has scenarios where users might register additional accounts while logged in with another account.

Session Management: In some scenarios, registration might not be a completely new user experience. For example, if you're allowing users to link new accounts to existing ones or if there's some form of guest session before registration, existing cookies might need to be included.




